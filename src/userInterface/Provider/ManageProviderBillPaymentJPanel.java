/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface.Provider;


import business.EcoSystem;
import business.Enterprise.DistributorEnterprise;
import business.Enterprise.Enterprise;
import business.Enterprise.ProviderEnterprise;
import business.PaymentTransaction.BankAccount;
import business.PaymentTransaction.Transaction;
import business.Role.Role;
import business.UserAccount.UserAccount;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ManageProviderBillPaymentJPanel extends javax.swing.JPanel {
    
    private JPanel upc;
    private ProviderEnterprise providerEnterprise;
    private UserAccount userAcc;
    private EcoSystem system;

    /**
     * Creates new form ProviderBillPaymentPanel
     */
    public ManageProviderBillPaymentJPanel(JPanel upc,ProviderEnterprise providerEnterprise,UserAccount userAcc,EcoSystem system) {
        initComponents();
        this.upc = upc;
        this.providerEnterprise = providerEnterprise;
        this.userAcc = userAcc;
        this.system = system;
        populateTable();
    }
    
    
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblPayments.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest req : userAcc.getWorkQueue().getWorkRequestList()){
            if(req.getOrder()!=null)
            {if( req.getOrder().getStatus().equals("Order Approved And Shipped")){
                if(req.getSender().equals(userAcc)){
                    if(req.getOrder().getProviderPaymentStatus().equals("NO")){
                        Object[] row = new Object[4];
                        row[0] = req.getOrder().getOrderNumber();
                        row[1] = req.getOrder().getBillAmount();
                        row[2] = req.getOrder().getTimeStamp();
                        UserAccount ua = getDistributorAdminAccount();
                        row[3] = ua.getAccountNumber();
                        dtm.addRow(row);
                    }
                
                }}
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnPay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        btnPay.setText("Pay!");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        add(btnPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 260, 100, 30));

        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Id", "Amount Due", "Order Date", "Pay To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPayments);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 530, 152));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Manage Provider Payment");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) upc.getLayout();
        upc.remove(this);
        layout.previous(upc);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPayments.getSelectedRow();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select an order to pay the bill!");
        }else{
            float amount = (float)tblPayments.getValueAt(selectedRow, 1);
            BankAccount acc = (BankAccount) tblPayments.getValueAt(selectedRow, 3);
            String orderId = (String) tblPayments.getValueAt(selectedRow, 0);
            if(amount > userAcc.getAccountNumber().getBalance()){
                JOptionPane.showMessageDialog(null, "Not enough balance to pay the bill!");
            }
            else{
                float bal = userAcc.getAccountNumber().getBalance();
                bal = bal - amount;
                userAcc.getAccountNumber().setBalance(bal);

                float recievedAmt = acc.getBalance();
                recievedAmt = recievedAmt + amount;
                acc.setBalance(recievedAmt);

                Transaction t = new Transaction();
                t.setAmount(amount);
                t.setFromAccount(userAcc.getAccountNumber());
                t.setToAccount(acc);
                Calendar cal = Calendar.getInstance();
                t.setDate(cal.getTime());
                t.setOrderId(orderId);

                userAcc.getAccountNumber().getTransaction().add(t);
                acc.getTransaction().add(t);

                for(WorkRequest req : userAcc.getWorkQueue().getWorkRequestList()){
                    if(req.getOrder() != null){
                        if(req.getOrder().getOrderNumber().equals(orderId)){
                            req.getOrder().setProviderPaymentStatus("YES");
                        }
                    }
                }

                JOptionPane.showMessageDialog(null, "Payment Successful!");
            }
        }
        populateTable();
    }//GEN-LAST:event_btnPayActionPerformed

    
    public UserAccount getDistributorAdminAccount(){
        UserAccount ua = null;
        
        for(Enterprise e : system.getEnterpriseDirectory().getEnterpriseList()){
            if( e instanceof DistributorEnterprise){
                DistributorEnterprise distEnt = (DistributorEnterprise) e;
                for(UserAccount u : distEnt.getUserAccountDirectory().getUserAccountList()){
                    if(u.getRole().getRoleName().equals(Role.RoleType.DistributorAdminRole.getValue())){
                        ua = u;
                    }
                }
                
            }
        }
        
        return ua;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPayments;
    // End of variables declaration//GEN-END:variables
}
