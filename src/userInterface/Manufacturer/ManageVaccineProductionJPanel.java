/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Manufacturer;

import business.EcoSystem;
import business.Enterprise.ManufacturerEnterprise;
import business.Vaccine.Batch;
import business.Vaccine.BatchDirectory;
import business.Vaccine.Vaccine;
import business.Vaccine.VaccineType;
import business.Vaccine.VaccineTypeDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ManageVaccineProductionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageVaccineProductionJPanel
     */
    
    private JPanel userProcessContainer;
    private BatchDirectory batchDirectory;
    private ManufacturerEnterprise manufacturerEnterprise;
    private VaccineTypeDirectory vaccineTypeDirectory;
    private EcoSystem system;

    public ManageVaccineProductionJPanel(JPanel userProcessContainer,ManufacturerEnterprise manufacturerEnterprise,VaccineTypeDirectory vaccineTypeDirectory,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.manufacturerEnterprise = manufacturerEnterprise;
        this.vaccineTypeDirectory = vaccineTypeDirectory;
        this.batchDirectory = manufacturerEnterprise.getBatchDirectory();
        this.system =system;
        populateTable();
        populateSoldVaccine();
    }
    
    private void populateSoldVaccine()
    {
    
         DefaultTableModel model = (DefaultTableModel) soldVaccineJTable.getModel();
            model.setRowCount(0);
            
            for(Batch b  : manufacturerEnterprise.getBatchDirectory().getBatchList())
            {
                if(b.getManufacturerInventoryStatus().equals(Batch.SOLD))
                {
                for(Vaccine v : b.getVaccineList())
                {
                    Object [] row = new Object[4];
                    row[0] = v.getVaccineType().getVaccineTypeName();
                    row[1] = v.getVaccineName();
                    row[2] = b.getBatchID();
                    row[3] = v.getvPrice()*20;
                    model.addRow(row);
                    break;
                }
            
                }
            }
    
    }

    public void populateTable()
    {
    
        DefaultTableModel model = (DefaultTableModel) vaccineJTable.getModel();
        model.setRowCount(0);
        ArrayList<Vaccine> vaccineList = new ArrayList<>();
        
        for(VaccineType type : vaccineTypeDirectory.getVaccineList())
        {
        
            for(Batch b : batchDirectory.getBatchList())
            {
            
                    for(Vaccine v : b.getVaccineList())
                    {
                        if(v.getVaccineType().equals(type))
                        {
                        boolean flag = checkExisting(v, vaccineList);
                        if(flag == false)
                        {
                            Object[] row = new Object[4];
                            row[0] = type.getVaccineTypeName();
                            row[1] = v;
                            row[2] = type.getStatus();
                            row[3] = type.getFundingInfo();
                            model.addRow(row);
                            vaccineList.add(v);
                            break;
                           
                        }
                        }
                    
                    }
                    
            }
        
        
        }
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vaccineJTable = new javax.swing.JTable();
        viewInventoryJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        vaccineInventoryJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        manufactureVaccineJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        soldVaccineJTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 33, -1, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Manage Vaccine Production");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 33, -1, -1));

        vaccineJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine Type", "Vaccine Name", "Production Status", "Federal Funding"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vaccineJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 730, 133));

        viewInventoryJButton.setText("View Current Inventory");
        viewInventoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInventoryJButtonActionPerformed(evt);
            }
        });
        add(viewInventoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 250, -1, 30));

        vaccineInventoryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vaccine Name", "Batch", "Inventory Status", "Manufactured Date", "Expiry Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(vaccineInventoryJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 820, 227));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Vaacine Inventory");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(77, 321, -1, -1));

        manufactureVaccineJButton.setText("Manufacture Vaccine");
        manufactureVaccineJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufactureVaccineJButtonActionPerformed(evt);
            }
        });
        add(manufactureVaccineJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, -1, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        soldVaccineJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine Type", "Vaccine Name", "Batch No", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(soldVaccineJTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 44, 685, 233));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 710, 830, 350));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Sold Vaccine List");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 660, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
       
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewInventoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInventoryJButtonActionPerformed
        // TODO add your handling code here:
        int rowSelected = vaccineJTable.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) vaccineInventoryJTable.getModel();
        model.setRowCount(0);
        
        if(rowSelected<0)
        {
            JOptionPane.showMessageDialog(null, "No row selected");
            return;
        
        }
        Vaccine v = (Vaccine) vaccineJTable.getValueAt(rowSelected, 1);
        for(Batch batch : batchDirectory.getBatchList())
        {
            for(Vaccine vac : batch.getVaccineList())
            {
                if(vac.getVaccineName().equals(v.getVaccineName()) && batch.getManufacturerInventoryStatus().equals(Batch.INSTOCK) && vac.getVaccineType().getVaccineTypeName().equals(v.getVaccineType().getVaccineTypeName()))
                {
                
                 Object[] row = new Object[5];
                            row[0] = vac.getVaccineName();
                            row[1] = vac.getVaccineBatchNo();
                            row[2] = batch.getManufacturerInventoryStatus();
                            row[3] = vac.getManufacturedDate();
                            row[4] = vac.getExpireDate();
                            model.addRow(row);
                            break;
                           
                
                }
            
            }
        
        }
        
        
        
    }//GEN-LAST:event_viewInventoryJButtonActionPerformed

    
    public boolean  checkExisting(Vaccine vName, ArrayList<Vaccine> vList)
    {
    
        if(!vList.isEmpty())
        {
            for(Vaccine v : vList)
            {
                if(v.getVaccineName().equals(vName.getVaccineName()) && v.getVaccineType().getVaccineTypeName().equals(vName.getVaccineType().getVaccineTypeName()))
                {
                
                    return true;
                
                }
            
            }
        
        }
        return false;
    }
    
    
    private void manufactureVaccineJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufactureVaccineJButtonActionPerformed
        // TODO add your handling code here:
        AddVaccineJPanel avjp = new AddVaccineJPanel(userProcessContainer,manufacturerEnterprise,vaccineTypeDirectory,system);
        userProcessContainer.add("AddVaccineJPanel", avjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_manufactureVaccineJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton manufactureVaccineJButton;
    private javax.swing.JTable soldVaccineJTable;
    private javax.swing.JTable vaccineInventoryJTable;
    private javax.swing.JTable vaccineJTable;
    private javax.swing.JButton viewInventoryJButton;
    // End of variables declaration//GEN-END:variables
}
