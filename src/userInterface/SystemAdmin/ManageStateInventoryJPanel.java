/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.SystemAdmin;

import business.EcoSystem;
import business.Enterprise.Enterprise;
import business.Enterprise.SiteEnterprise;
import business.Network.CityNetwork;
import business.Network.StateNetwork;
import business.State.State;
import business.Vaccine.Batch;
import business.Vaccine.Vaccine;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ManageStateInventoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStateInventoryJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    public ManageStateInventoryJPanel(JPanel userProcessContainer,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateStateCombo();
    }
    
    private void populateStateCombo()
    {
        stateJComboBox.removeAllItems();
        
        for(StateNetwork network : system.getStateNetworkDirectory().getStateNetwork())
        {
            stateJComboBox.addItem(network.getState());
        
        }
        
        
    
    }
    private void populateInventoryTable(State state)
    {
    
        DefaultTableModel model = (DefaultTableModel) stateJTable.getModel();
        model.setRowCount(0);
        
        for(StateNetwork network : system.getStateNetworkDirectory().getStateNetwork())
        {
            if(network.getState().equals(state))
            {
            
                for(CityNetwork city: network.getState().getStatePHD().getCityNetworkDirectory().getCityNetworkDirectory())
                {
                
                   for(Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList())
                   {
                       if(enterprise instanceof SiteEnterprise)
                       {
                           SiteEnterprise siteEnterprise = (SiteEnterprise)enterprise;
                           for(Batch b : siteEnterprise.getBatchDirectory().getBatchList())
                           {
                               if(b.getAvailability()>0)
                               {
                                   for(Vaccine v : b.getVaccineList())
                                   {
                                       
                                       Object[] row = new Object[6];
                                       row[0] = v.getVaccineType().getVaccineTypeName();
                                       row[1] = v.getVaccineName();
                                       row[2] = b.getBatchID();
                                       row[3] = siteEnterprise.getName();
                                       row[4] = v.getExpireDate();
                                       row[5] = b.getAvailability();
                                       model.addRow(row);
                                       break;
                                   }
                               
                               }
                               
                           
                           }
                       
                       }
                   
                   }
                
                }
            
            }
        
        }
        
        
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stateJComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        stateJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Manage Each State Vaccine Inventory");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 29, -1, -1));

        jLabel2.setText("State Name :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 103, -1, -1));

        stateJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        stateJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateJComboBoxActionPerformed(evt);
            }
        });
        add(stateJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 97, 151, -1));

        stateJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Vaccine Type", "Vaccine Name", "Batch", "Site", "Expiry Date", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stateJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 930, 166));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 29, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void stateJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateJComboBoxActionPerformed
        // TODO add your handling code here:
        
        State state = (State) stateJComboBox.getSelectedItem();
        
        if(state!=null)
        {
            populateInventoryTable(state);
        
        }
    }//GEN-LAST:event_stateJComboBoxActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox stateJComboBox;
    private javax.swing.JTable stateJTable;
    // End of variables declaration//GEN-END:variables
}
