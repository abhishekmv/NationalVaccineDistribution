/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Sites.Doctor;

import business.Doctor.Doctor;
import business.EcoSystem;
import business.Enterprise.SiteEnterprise;
import business.Patient.Encounter;
import business.Patient.EncounterDirectory;
import business.Patient.Patient;
import business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userInterface.Provider.ManageProviderAccountsJPanel;

/**
 *
 * @author Abhishek
 */
public class ViewPatientMedicalHistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPatientMedicalHistoryJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount doctorAccount;
    private UserAccount patientAccount;
    private EncounterDirectory patientEncounterDirectory;
    private EncounterDirectory doctorEncounterDirectory;
    private SiteEnterprise siteEnterprise;
   // private EcoSystem system;
    
    
    
    public ViewPatientMedicalHistoryJPanel(JPanel userProcessContainer, UserAccount patientAccount, UserAccount doctorAccount,SiteEnterprise siteEnterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.doctorAccount = doctorAccount;
        this.patientAccount = patientAccount;
        
        this.patientEncounterDirectory = patientAccount.getEncounterDirectory();
        this.doctorEncounterDirectory = doctorAccount.getEncounterDirectory();
        
       // this.system = system;
        populateEncounterTable();
        
    }
    
    
    private void populateEncounterTable()
    {
        DefaultTableModel model = (DefaultTableModel) patientEncounterJTable.getModel();
        model.setRowCount(0);
        if(patientEncounterDirectory!=null)
        {
        for(Encounter e : patientEncounterDirectory.getEncounterList())
        {
            Object [] row = new Object[5];
            row[0] = e;
            row[1] = e.getEncounterDate();
            row[2] = e.getDoctorName();
            
            
            if(e.getVaccine()!=null)
            {
                row[3] = e.getVaccine().getVaccineName();
                row[4] = e.getNoOfDose();
                
            
            }
            model.addRow(row);
        }
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientEncounterJTable = new javax.swing.JTable();
        addEncounterJButton = new javax.swing.JButton();
        viewEncounterJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewEcounterJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Patient Encounter History");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 46, -1, -1));

        patientEncounterJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter ID", "Date", "Doctor Name", "Vaccine Administered", "Dosage"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientEncounterJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 94, 680, 158));

        addEncounterJButton.setText("Add Encounter Details");
        addEncounterJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncounterJButtonActionPerformed(evt);
            }
        });
        add(addEncounterJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 285, -1, -1));

        viewEncounterJButton.setText("View Encounter Details");
        viewEncounterJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncounterJButtonActionPerformed(evt);
            }
        });
        add(viewEncounterJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 285, -1, -1));

        viewEcounterJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Respiratory Rate", "Heart Rate", "Blood Pressure", "Weight", "Report"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(viewEcounterJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 417, 601, 158));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Encounter Details");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 388, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 46, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addEncounterJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncounterJButtonActionPerformed
        // TODO add your handling code here:
        
       //  AddPatientEncounterJPanel apejp = new AddPatientEncounterJPanel(userProcessContainer,system,siteEnterprise,patientAccount, doctorAccount);
      //  CardLayout layout = (CardLayout) userProcessContainer.getLayout();
      //  userProcessContainer.add("AddPatientEncounterJPanel", apejp);
      //  layout.next(userProcessContainer);
    }//GEN-LAST:event_addEncounterJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewEncounterJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncounterJButtonActionPerformed
        // TODO add your handling code here:
        int rowSelected = patientEncounterJTable.getSelectedRow();
        
        if(rowSelected<0)
        {
            JOptionPane.showMessageDialog(null, "No row has been selected!");
            return;
        
        }
        
        Encounter e = (Encounter) patientEncounterJTable.getValueAt(rowSelected, 0);
        
        DefaultTableModel model = (DefaultTableModel) viewEcounterJTable.getModel();
        
        Object [] row = new Object[5];
        row[0] = e.getVitalSign().getRespiratoryRate();
        row[1] = e.getVitalSign().getHeartRate();
        row[2] = e.getVitalSign().getSystolicBloodPressure();
        row[3] = e.getVitalSign().getWeight();
        row[4] = e.getEncounterDetails();
        model.addRow(row);
        
    }//GEN-LAST:event_viewEncounterJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEncounterJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientEncounterJTable;
    private javax.swing.JTable viewEcounterJTable;
    private javax.swing.JButton viewEncounterJButton;
    // End of variables declaration//GEN-END:variables
}
