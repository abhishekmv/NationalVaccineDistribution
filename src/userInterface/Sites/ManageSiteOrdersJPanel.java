/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface.Sites;


import business.EcoSystem;
import business.Enterprise.Enterprise;
import business.Enterprise.ManufacturerEnterprise;
import business.Enterprise.PHDEnterprise;
import business.Enterprise.ProviderEnterprise;
import business.Enterprise.SiteEnterprise;
import business.Network.StateNetwork;
import business.Order.Order;
import business.Order.OrderItem;
import business.UserAccount.UserAccount;
import business.Vaccine.Batch;
import business.Vaccine.Vaccine;
import business.Vaccine.VaccineType;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ManageSiteOrdersJPanel extends javax.swing.JPanel {
    
    private JPanel upc;
    private EcoSystem system;
    private UserAccount userAccount;
    private SiteEnterprise siteEnterprise;
    private Order order;
    

    /**
     * Creates new form ManageOrdersPanel
     */
    public ManageSiteOrdersJPanel(JPanel upc,EcoSystem system,UserAccount userAccount,SiteEnterprise siteEnterprise) {
        initComponents();
        this.upc = upc;
        this.system = system;
        this.userAccount = userAccount;
        this.siteEnterprise = siteEnterprise;
        
        order = new Order();
        populateTypeCombo();
    }
    
    public void populateTypeCombo(){
        comboVacType.removeAllItems();
        
        for(VaccineType vt : system.getVaccineDirectory().getVaccineList()){
            comboVacType.addItem(vt);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageOrders = new javax.swing.JTable();
        spinnerQty = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboVacType = new javax.swing.JComboBox();
        btnAddToCart = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtBill = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderCart = new javax.swing.JTable();
        btnCheckout = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Manage Orders");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 13, -1, -1));

        tblManageOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Name", "Disease", "Manufacturer", "Federal Funding", "State Funding", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblManageOrders);
        if (tblManageOrders.getColumnModel().getColumnCount() > 0) {
            tblManageOrders.getColumnModel().getColumn(0).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(1).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(2).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(3).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(4).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(5).setResizable(false);
            tblManageOrders.getColumnModel().getColumn(6).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 108, 779, 136));
        add(spinnerQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 279, 50, -1));

        jLabel2.setText("Quanity");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 276, -1, 24));

        jLabel3.setText("Vaccine Type");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 72, -1, -1));

        comboVacType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboVacType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVacTypeActionPerformed(evt);
            }
        });
        add(comboVacType, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 68, -1, -1));

        btnAddToCart.setText("Add To Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(526, 276, -1, -1));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 13, -1, -1));

        jLabel4.setText("Total Bill Amount :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(568, 506, -1, -1));

        txtBill.setEditable(false);
        add(txtBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(686, 503, 130, -1));

        tblOrderCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Type", "Name", "Quantity", "Manufacturer", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrderCart);
        if (tblOrderCart.getColumnModel().getColumnCount() > 0) {
            tblOrderCart.getColumnModel().getColumn(0).setResizable(false);
            tblOrderCart.getColumnModel().getColumn(1).setResizable(false);
            tblOrderCart.getColumnModel().getColumn(2).setResizable(false);
            tblOrderCart.getColumnModel().getColumn(3).setResizable(false);
            tblOrderCart.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 330, 779, 144));

        btnCheckout.setText("Check Out!");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        add(btnCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 500, -1, -1));

        btnRemove.setText("Remove Item");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 502, -1, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Item In Cart");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 296, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void comboVacTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVacTypeActionPerformed
        // TODO add your handling code here:
        
        VaccineType vt = (VaccineType)comboVacType.getSelectedItem();
        
        DefaultTableModel dtm = (DefaultTableModel) tblManageOrders.getModel();
        dtm.setRowCount(0);
        ArrayList<Vaccine> vaccList = new ArrayList<>();
        
        for(Enterprise m : system.getEnterpriseDirectory().getEnterpriseList()){
            if(m instanceof ManufacturerEnterprise){
                ManufacturerEnterprise me = (ManufacturerEnterprise) m;
                for(Batch b : me.getBatchDirectory().getBatchList()){
                    boolean check = false;
                    for(Vaccine v : b.getVaccineList()){
                   
                            if(v.getVaccineType().equals(vt) && v.getVaccineType().getStatus().equals(VaccineType.ACTIVE)){
                                boolean flag = checkExisting( v , vaccList);
                                if(flag == false){
                                    Object[] row = new Object[7];
                                    row[0] = vt;
                                    row[1] = v;
                                    row[2] = vt.getDisease();
                                    row[3] = m;
                                    row[4] = vt.getFundingInfo();
                                    
                                    for(StateNetwork sn : system.getStateNetworkDirectory().getStateNetwork()){
                                        if(sn.getState().getName().equals(siteEnterprise.getStateName())){
                                            for(String stateName : vt.getStateFundedList()){
                                                if(siteEnterprise.getStateName().equals(stateName)){
                                                    row[5] = "YES" ;
                                                    check = true;
                                                    break;
                                                }
                                            }
                                        }

                                    }
                                    
                                    if(check == false){
                                        row[5] = "NO";
                                    }
                                    row[6] = v.getvPrice();
                                    
                                    dtm.addRow(row);
                                    vaccList.add(v);
                                    break;
                                }
                            }
                        }
               
                    }
                }
            }   
    }//GEN-LAST:event_comboVacTypeActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblManageOrders.getSelectedRow();
        
        if(selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a vaccine to order!");
        }
        else{
            int qty = (int)spinnerQty.getValue();
        
            if(qty < 0){
                JOptionPane.showMessageDialog(null, "Please select appropriate quantity to order!");
            }
            else{
                VaccineType vt = (VaccineType)tblManageOrders.getValueAt(selectedRow, 0);
                Vaccine v = (Vaccine) tblManageOrders.getValueAt(selectedRow, 1);
                ManufacturerEnterprise manufacturer = (ManufacturerEnterprise) tblManageOrders.getValueAt(selectedRow, 3);
                OrderItem oi = new OrderItem();
                oi.setVaccine(v);
                oi.setManufacturer(manufacturer);
                oi.setVaccineType(vt);
                oi.setBatchQuantity(qty);
                order.getOrderItemList().add(oi);
                populateCartTable(order);
            }
        }
        
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        
        if(!order.getOrderItemList().isEmpty()){
            int selectedRow = tblOrderCart.getSelectedRow();
        
            if(selectedRow < 0){
                JOptionPane.showMessageDialog(null, "Please select an item to remove from the order!");
            }
            else{
                OrderItem oi = order.getOrderItemList().get(selectedRow);
                order.getOrderItemList().remove(oi);
                populateCartTable(order);
            }
        }else{
            JOptionPane.showMessageDialog(null, "What are you trying to remove?");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        ProviderEnterprise pe = getStateProvider();
        
        if(pe != null){
        
                if(!order.getOrderItemList().isEmpty()){
                WorkRequest req = new WorkRequest();
                float bill = getBillAmount();
                Calendar c = Calendar.getInstance();
                order.setBillAmount(bill);
                order.setSite(siteEnterprise);
                //order.setDate(c.getTime());
                req.setOrder(order);
                req.setStatus("Order Pending at provider");
                req.setSender(userAccount);
                req.setRequestDate(c.getTime());
                system.getMasterOrderCatalog().getOrderCatalog().add(order);
                userAccount.getWorkQueue().getWorkRequestList().add(req);
                pe.getWorkQueue().getWorkRequestList().add(req);
                txtBill.setText(String.valueOf(order.getBillAmount()));
                
                order = new Order();
            
            }
            else{
                JOptionPane.showMessageDialog(null, "Please place an order and then hit check out!");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Your state doe not have a provider yet. Your order cannot be processed!");
        }
        populateCartTable();
        
    }//GEN-LAST:event_btnCheckoutActionPerformed

    public boolean checkExisting(Vaccine vaccine,ArrayList<Vaccine> vacList){
        if(!vacList.isEmpty()){
            for(Vaccine v : vacList){
                if(v.getVaccineName().equals(vaccine.getVaccineName()) && v.getVaccineType().getVaccineTypeName().equals(vaccine.getVaccineType().getVaccineTypeName())){
                    return true;
                }   
            }
        }
        return false;
    }

    public void populateCartTable(Order o){
        DefaultTableModel dtm = (DefaultTableModel) tblOrderCart.getModel();
        dtm.setRowCount(0);
        
        if(!o.getOrderItemList().isEmpty()){
            for(OrderItem oi : order.getOrderItemList()){
                Object[] row = new Object[5];
                row[0] = oi.getVaccineType();
                row[1] = oi.getVaccine();
                row[2] = oi.getBatchQuantity();
                row[3] = oi.getManufacturer();
                row[4] = oi.getBatchQuantity()*oi.getVaccine().getvPrice()*20;
                dtm.addRow(row);
            }
        }
    }
    
    public void populateCartTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblOrderCart.getModel();
        dtm.setRowCount(0);
        
        
            for(OrderItem oi : order.getOrderItemList()){
                Object[] row = new Object[5];
                row[0] = oi.getVaccineType();
                row[1] = oi.getVaccine();
                row[2] = oi.getBatchQuantity();
                row[3] = oi.getManufacturer();
                row[4] = oi.getBatchQuantity()*oi.getVaccine().getvPrice()*20;
                dtm.addRow(row);
            }
        
    }
    
    public float getBillAmount(){
        float price = 0;
        
        
        for(OrderItem oi : order.getOrderItemList()){
            boolean flag = false;
            if(oi.getVaccineType().getFundingInfo().equals(VaccineType.FEDERALLYFUNDED)){
                flag = true;
            }
            
            else{
                for(String s : oi.getVaccineType().getStateFundedList()){
                    if(s.equals(siteEnterprise.getStateName())){
                        flag = true;
                    }
                }
            }
            
            if(flag == false){
                price = price + (oi.getVaccine().getvPrice()* 20* oi.getBatchQuantity());
            }
        }
        
        return price;
    }
    
    public ProviderEnterprise getStateProvider(){
        ProviderEnterprise pe = null;
        
        for(Enterprise e : system.getEnterpriseDirectory().getEnterpriseList()){
            if(e instanceof PHDEnterprise){
                PHDEnterprise ent = (PHDEnterprise)e;
                if(ent.getStateName().equals(siteEnterprise.getStateName())){
                    for(Enterprise enterprise : ent.getEnterpriseDirectory().getEnterpriseList()){
                        if(enterprise instanceof ProviderEnterprise){
                            pe = (ProviderEnterprise) enterprise;
                            break;
                        }
                    }
                }
            }
        }
        
        return pe;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox comboVacType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spinnerQty;
    private javax.swing.JTable tblManageOrders;
    private javax.swing.JTable tblOrderCart;
    private javax.swing.JTextField txtBill;
    // End of variables declaration//GEN-END:variables
}
